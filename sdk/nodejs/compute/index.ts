// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./aggregateV2";
export * from "./flavor";
export * from "./flavorAccess";
export * from "./floatingIp";
export * from "./floatingIpAssociate";
export * from "./getAggregateV2";
export * from "./getAvailabilityZones";
export * from "./getFlavor";
export * from "./getHypervisorV2";
export * from "./getInstanceV2";
export * from "./getKeypair";
export * from "./getLimitsV2";
export * from "./getQuotaSetV2";
export * from "./instance";
export * from "./interfaceAttach";
export * from "./keypair";
export * from "./quotaSetV2";
export * from "./secGroup";
export * from "./serverGroup";
export * from "./volumeAttach";

// Import resources to register:
import { AggregateV2 } from "./aggregateV2";
import { Flavor } from "./flavor";
import { FlavorAccess } from "./flavorAccess";
import { FloatingIp } from "./floatingIp";
import { FloatingIpAssociate } from "./floatingIpAssociate";
import { Instance } from "./instance";
import { InterfaceAttach } from "./interfaceAttach";
import { Keypair } from "./keypair";
import { QuotaSetV2 } from "./quotaSetV2";
import { SecGroup } from "./secGroup";
import { ServerGroup } from "./serverGroup";
import { VolumeAttach } from "./volumeAttach";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:compute/aggregateV2:AggregateV2":
                return new AggregateV2(name, <any>undefined, { urn })
            case "openstack:compute/flavor:Flavor":
                return new Flavor(name, <any>undefined, { urn })
            case "openstack:compute/flavorAccess:FlavorAccess":
                return new FlavorAccess(name, <any>undefined, { urn })
            case "openstack:compute/floatingIp:FloatingIp":
                return new FloatingIp(name, <any>undefined, { urn })
            case "openstack:compute/floatingIpAssociate:FloatingIpAssociate":
                return new FloatingIpAssociate(name, <any>undefined, { urn })
            case "openstack:compute/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "openstack:compute/interfaceAttach:InterfaceAttach":
                return new InterfaceAttach(name, <any>undefined, { urn })
            case "openstack:compute/keypair:Keypair":
                return new Keypair(name, <any>undefined, { urn })
            case "openstack:compute/quotaSetV2:QuotaSetV2":
                return new QuotaSetV2(name, <any>undefined, { urn })
            case "openstack:compute/secGroup:SecGroup":
                return new SecGroup(name, <any>undefined, { urn })
            case "openstack:compute/serverGroup:ServerGroup":
                return new ServerGroup(name, <any>undefined, { urn })
            case "openstack:compute/volumeAttach:VolumeAttach":
                return new VolumeAttach(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "compute/aggregateV2", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/flavor", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/flavorAccess", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/floatingIp", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/floatingIpAssociate", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/instance", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/interfaceAttach", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/keypair", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/quotaSetV2", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/secGroup", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/serverGroup", _module)
pulumi.runtime.registerResourceModule("openstack", "compute/volumeAttach", _module)
