// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ContainerArgs, ContainerState } from "./container";
export type Container = import("./container").Container;
export const Container: typeof import("./container").Container = null as any;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));

export { ContainerObjectArgs, ContainerObjectState } from "./containerObject";
export type ContainerObject = import("./containerObject").ContainerObject;
export const ContainerObject: typeof import("./containerObject").ContainerObject = null as any;
utilities.lazyLoad(exports, ["ContainerObject"], () => require("./containerObject"));

export { TempUrlArgs, TempUrlState } from "./tempUrl";
export type TempUrl = import("./tempUrl").TempUrl;
export const TempUrl: typeof import("./tempUrl").TempUrl = null as any;
utilities.lazyLoad(exports, ["TempUrl"], () => require("./tempUrl"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:objectstorage/container:Container":
                return new Container(name, <any>undefined, { urn })
            case "openstack:objectstorage/containerObject:ContainerObject":
                return new ContainerObject(name, <any>undefined, { urn })
            case "openstack:objectstorage/tempUrl:TempUrl":
                return new TempUrl(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "objectstorage/container", _module)
pulumi.runtime.registerResourceModule("openstack", "objectstorage/containerObject", _module)
pulumi.runtime.registerResourceModule("openstack", "objectstorage/tempUrl", _module)
