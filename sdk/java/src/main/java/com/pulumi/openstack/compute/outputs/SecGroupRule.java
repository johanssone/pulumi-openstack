// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecGroupRule {
    /**
     * @return Required if `from_group_id` or `self` is empty. The IP range
     * that will be the source of network traffic to the security group. Use 0.0.0.0/0
     * to allow all IP addresses. Changing this creates a new security group rule. Cannot
     * be combined with `from_group_id` or `self`.
     * 
     */
    private final @Nullable String cidr;
    /**
     * @return Required if `cidr` or `self` is empty. The ID of a
     * group from which to forward traffic to the parent group. Changing this creates a
     * new security group rule. Cannot be combined with `cidr` or `self`.
     * 
     */
    private final @Nullable String fromGroupId;
    /**
     * @return An integer representing the lower bound of the port
     * range to open. Changing this creates a new security group rule.
     * 
     */
    private final Integer fromPort;
    private final @Nullable String id;
    /**
     * @return The protocol type that will be allowed. Changing
     * this creates a new security group rule.
     * 
     */
    private final String ipProtocol;
    /**
     * @return Required if `cidr` and `from_group_id` is empty. If true,
     * the security group itself will be added as a source to this ingress rule. Cannot
     * be combined with `cidr` or `from_group_id`.
     * 
     */
    private final @Nullable Boolean self;
    /**
     * @return An integer representing the upper bound of the port
     * range to open. Changing this creates a new security group rule.
     * 
     */
    private final Integer toPort;

    @CustomType.Constructor
    private SecGroupRule(
        @CustomType.Parameter("cidr") @Nullable String cidr,
        @CustomType.Parameter("fromGroupId") @Nullable String fromGroupId,
        @CustomType.Parameter("fromPort") Integer fromPort,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("ipProtocol") String ipProtocol,
        @CustomType.Parameter("self") @Nullable Boolean self,
        @CustomType.Parameter("toPort") Integer toPort) {
        this.cidr = cidr;
        this.fromGroupId = fromGroupId;
        this.fromPort = fromPort;
        this.id = id;
        this.ipProtocol = ipProtocol;
        this.self = self;
        this.toPort = toPort;
    }

    /**
     * @return Required if `from_group_id` or `self` is empty. The IP range
     * that will be the source of network traffic to the security group. Use 0.0.0.0/0
     * to allow all IP addresses. Changing this creates a new security group rule. Cannot
     * be combined with `from_group_id` or `self`.
     * 
     */
    public Optional<String> cidr() {
        return Optional.ofNullable(this.cidr);
    }
    /**
     * @return Required if `cidr` or `self` is empty. The ID of a
     * group from which to forward traffic to the parent group. Changing this creates a
     * new security group rule. Cannot be combined with `cidr` or `self`.
     * 
     */
    public Optional<String> fromGroupId() {
        return Optional.ofNullable(this.fromGroupId);
    }
    /**
     * @return An integer representing the lower bound of the port
     * range to open. Changing this creates a new security group rule.
     * 
     */
    public Integer fromPort() {
        return this.fromPort;
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The protocol type that will be allowed. Changing
     * this creates a new security group rule.
     * 
     */
    public String ipProtocol() {
        return this.ipProtocol;
    }
    /**
     * @return Required if `cidr` and `from_group_id` is empty. If true,
     * the security group itself will be added as a source to this ingress rule. Cannot
     * be combined with `cidr` or `from_group_id`.
     * 
     */
    public Optional<Boolean> self() {
        return Optional.ofNullable(this.self);
    }
    /**
     * @return An integer representing the upper bound of the port
     * range to open. Changing this creates a new security group rule.
     * 
     */
    public Integer toPort() {
        return this.toPort;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecGroupRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String cidr;
        private @Nullable String fromGroupId;
        private Integer fromPort;
        private @Nullable String id;
        private String ipProtocol;
        private @Nullable Boolean self;
        private Integer toPort;

        public Builder() {
    	      // Empty
        }

        public Builder(SecGroupRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidr = defaults.cidr;
    	      this.fromGroupId = defaults.fromGroupId;
    	      this.fromPort = defaults.fromPort;
    	      this.id = defaults.id;
    	      this.ipProtocol = defaults.ipProtocol;
    	      this.self = defaults.self;
    	      this.toPort = defaults.toPort;
        }

        public Builder cidr(@Nullable String cidr) {
            this.cidr = cidr;
            return this;
        }
        public Builder fromGroupId(@Nullable String fromGroupId) {
            this.fromGroupId = fromGroupId;
            return this;
        }
        public Builder fromPort(Integer fromPort) {
            this.fromPort = Objects.requireNonNull(fromPort);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder ipProtocol(String ipProtocol) {
            this.ipProtocol = Objects.requireNonNull(ipProtocol);
            return this;
        }
        public Builder self(@Nullable Boolean self) {
            this.self = self;
            return this;
        }
        public Builder toPort(Integer toPort) {
            this.toPort = Objects.requireNonNull(toPort);
            return this;
        }        public SecGroupRule build() {
            return new SecGroupRule(cidr, fromGroupId, fromPort, id, ipProtocol, self, toPort);
        }
    }
}
