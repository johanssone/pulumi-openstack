// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworkResult {
    /**
     * @return The administrative state of the network.
     * 
     */
    private final String adminStateUp;
    /**
     * @return The set of string tags applied on the network.
     * 
     */
    private final List<String> allTags;
    /**
     * @return The availability zone candidates for the network.
     * 
     */
    private final List<String> availabilityZoneHints;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String description;
    /**
     * @return The network DNS domain. Available, when Neutron DNS extension
     * is enabled
     * 
     */
    private final String dnsDomain;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable Boolean external;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final @Nullable String matchingSubnetCidr;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable Integer mtu;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String name;
    private final @Nullable String networkId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String region;
    /**
     * @return Specifies whether the network resource can be accessed by any
     * tenant or not.
     * 
     */
    private final String shared;
    private final @Nullable String status;
    /**
     * @return A list of subnet IDs belonging to the network.
     * 
     */
    private final List<String> subnets;
    private final @Nullable List<String> tags;
    private final @Nullable String tenantId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable Boolean transparentVlan;

    @CustomType.Constructor
    private GetNetworkResult(
        @CustomType.Parameter("adminStateUp") String adminStateUp,
        @CustomType.Parameter("allTags") List<String> allTags,
        @CustomType.Parameter("availabilityZoneHints") List<String> availabilityZoneHints,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("dnsDomain") String dnsDomain,
        @CustomType.Parameter("external") @Nullable Boolean external,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("matchingSubnetCidr") @Nullable String matchingSubnetCidr,
        @CustomType.Parameter("mtu") @Nullable Integer mtu,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("networkId") @Nullable String networkId,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("shared") String shared,
        @CustomType.Parameter("status") @Nullable String status,
        @CustomType.Parameter("subnets") List<String> subnets,
        @CustomType.Parameter("tags") @Nullable List<String> tags,
        @CustomType.Parameter("tenantId") @Nullable String tenantId,
        @CustomType.Parameter("transparentVlan") @Nullable Boolean transparentVlan) {
        this.adminStateUp = adminStateUp;
        this.allTags = allTags;
        this.availabilityZoneHints = availabilityZoneHints;
        this.description = description;
        this.dnsDomain = dnsDomain;
        this.external = external;
        this.id = id;
        this.matchingSubnetCidr = matchingSubnetCidr;
        this.mtu = mtu;
        this.name = name;
        this.networkId = networkId;
        this.region = region;
        this.shared = shared;
        this.status = status;
        this.subnets = subnets;
        this.tags = tags;
        this.tenantId = tenantId;
        this.transparentVlan = transparentVlan;
    }

    /**
     * @return The administrative state of the network.
     * 
     */
    public String adminStateUp() {
        return this.adminStateUp;
    }
    /**
     * @return The set of string tags applied on the network.
     * 
     */
    public List<String> allTags() {
        return this.allTags;
    }
    /**
     * @return The availability zone candidates for the network.
     * 
     */
    public List<String> availabilityZoneHints() {
        return this.availabilityZoneHints;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The network DNS domain. Available, when Neutron DNS extension
     * is enabled
     * 
     */
    public String dnsDomain() {
        return this.dnsDomain;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<Boolean> external() {
        return Optional.ofNullable(this.external);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> matchingSubnetCidr() {
        return Optional.ofNullable(this.matchingSubnetCidr);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<Integer> mtu() {
        return Optional.ofNullable(this.mtu);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> networkId() {
        return Optional.ofNullable(this.networkId);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Specifies whether the network resource can be accessed by any
     * tenant or not.
     * 
     */
    public String shared() {
        return this.shared;
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return A list of subnet IDs belonging to the network.
     * 
     */
    public List<String> subnets() {
        return this.subnets;
    }
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<Boolean> transparentVlan() {
        return Optional.ofNullable(this.transparentVlan);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String adminStateUp;
        private List<String> allTags;
        private List<String> availabilityZoneHints;
        private @Nullable String description;
        private String dnsDomain;
        private @Nullable Boolean external;
        private String id;
        private @Nullable String matchingSubnetCidr;
        private @Nullable Integer mtu;
        private @Nullable String name;
        private @Nullable String networkId;
        private String region;
        private String shared;
        private @Nullable String status;
        private List<String> subnets;
        private @Nullable List<String> tags;
        private @Nullable String tenantId;
        private @Nullable Boolean transparentVlan;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminStateUp = defaults.adminStateUp;
    	      this.allTags = defaults.allTags;
    	      this.availabilityZoneHints = defaults.availabilityZoneHints;
    	      this.description = defaults.description;
    	      this.dnsDomain = defaults.dnsDomain;
    	      this.external = defaults.external;
    	      this.id = defaults.id;
    	      this.matchingSubnetCidr = defaults.matchingSubnetCidr;
    	      this.mtu = defaults.mtu;
    	      this.name = defaults.name;
    	      this.networkId = defaults.networkId;
    	      this.region = defaults.region;
    	      this.shared = defaults.shared;
    	      this.status = defaults.status;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.transparentVlan = defaults.transparentVlan;
        }

        public Builder adminStateUp(String adminStateUp) {
            this.adminStateUp = Objects.requireNonNull(adminStateUp);
            return this;
        }
        public Builder allTags(List<String> allTags) {
            this.allTags = Objects.requireNonNull(allTags);
            return this;
        }
        public Builder allTags(String... allTags) {
            return allTags(List.of(allTags));
        }
        public Builder availabilityZoneHints(List<String> availabilityZoneHints) {
            this.availabilityZoneHints = Objects.requireNonNull(availabilityZoneHints);
            return this;
        }
        public Builder availabilityZoneHints(String... availabilityZoneHints) {
            return availabilityZoneHints(List.of(availabilityZoneHints));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder dnsDomain(String dnsDomain) {
            this.dnsDomain = Objects.requireNonNull(dnsDomain);
            return this;
        }
        public Builder external(@Nullable Boolean external) {
            this.external = external;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder matchingSubnetCidr(@Nullable String matchingSubnetCidr) {
            this.matchingSubnetCidr = matchingSubnetCidr;
            return this;
        }
        public Builder mtu(@Nullable Integer mtu) {
            this.mtu = mtu;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder networkId(@Nullable String networkId) {
            this.networkId = networkId;
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder shared(String shared) {
            this.shared = Objects.requireNonNull(shared);
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        public Builder subnets(List<String> subnets) {
            this.subnets = Objects.requireNonNull(subnets);
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        public Builder transparentVlan(@Nullable Boolean transparentVlan) {
            this.transparentVlan = transparentVlan;
            return this;
        }        public GetNetworkResult build() {
            return new GetNetworkResult(adminStateUp, allTags, availabilityZoneHints, description, dnsDomain, external, id, matchingSubnetCidr, mtu, name, networkId, region, shared, status, subnets, tags, tenantId, transparentVlan);
        }
    }
}
