// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.sharedfilesystem.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.openstack.sharedfilesystem.outputs.GetShareExportLocation;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetShareResult {
    /**
     * @return The share availability zone.
     * 
     */
    private final String availabilityZone;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String description;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String exportLocationPath;
    /**
     * @return A list of export locations. For example, when a share
     * server has more than one network interface, it can have multiple export
     * locations.
     * 
     */
    private final List<GetShareExportLocation> exportLocations;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final Boolean isPublic;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final Map<String,Object> metadata;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String name;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String projectId;
    /**
     * @return The region in which to obtain the V2 Shared File System client.
     * 
     */
    private final String region;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String shareNetworkId;
    /**
     * @return The share protocol.
     * 
     */
    private final String shareProto;
    /**
     * @return The share size, in GBs.
     * 
     */
    private final Integer size;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String snapshotId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String status;

    @CustomType.Constructor
    private GetShareResult(
        @CustomType.Parameter("availabilityZone") String availabilityZone,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("exportLocationPath") @Nullable String exportLocationPath,
        @CustomType.Parameter("exportLocations") List<GetShareExportLocation> exportLocations,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isPublic") Boolean isPublic,
        @CustomType.Parameter("metadata") Map<String,Object> metadata,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("projectId") String projectId,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("shareNetworkId") String shareNetworkId,
        @CustomType.Parameter("shareProto") String shareProto,
        @CustomType.Parameter("size") Integer size,
        @CustomType.Parameter("snapshotId") String snapshotId,
        @CustomType.Parameter("status") String status) {
        this.availabilityZone = availabilityZone;
        this.description = description;
        this.exportLocationPath = exportLocationPath;
        this.exportLocations = exportLocations;
        this.id = id;
        this.isPublic = isPublic;
        this.metadata = metadata;
        this.name = name;
        this.projectId = projectId;
        this.region = region;
        this.shareNetworkId = shareNetworkId;
        this.shareProto = shareProto;
        this.size = size;
        this.snapshotId = snapshotId;
        this.status = status;
    }

    /**
     * @return The share availability zone.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> exportLocationPath() {
        return Optional.ofNullable(this.exportLocationPath);
    }
    /**
     * @return A list of export locations. For example, when a share
     * server has more than one network interface, it can have multiple export
     * locations.
     * 
     */
    public List<GetShareExportLocation> exportLocations() {
        return this.exportLocations;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Boolean isPublic() {
        return this.isPublic;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The region in which to obtain the V2 Shared File System client.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String shareNetworkId() {
        return this.shareNetworkId;
    }
    /**
     * @return The share protocol.
     * 
     */
    public String shareProto() {
        return this.shareProto;
    }
    /**
     * @return The share size, in GBs.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetShareResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String availabilityZone;
        private String description;
        private @Nullable String exportLocationPath;
        private List<GetShareExportLocation> exportLocations;
        private String id;
        private Boolean isPublic;
        private Map<String,Object> metadata;
        private String name;
        private String projectId;
        private String region;
        private String shareNetworkId;
        private String shareProto;
        private Integer size;
        private String snapshotId;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetShareResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.description = defaults.description;
    	      this.exportLocationPath = defaults.exportLocationPath;
    	      this.exportLocations = defaults.exportLocations;
    	      this.id = defaults.id;
    	      this.isPublic = defaults.isPublic;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.shareNetworkId = defaults.shareNetworkId;
    	      this.shareProto = defaults.shareProto;
    	      this.size = defaults.size;
    	      this.snapshotId = defaults.snapshotId;
    	      this.status = defaults.status;
        }

        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder exportLocationPath(@Nullable String exportLocationPath) {
            this.exportLocationPath = exportLocationPath;
            return this;
        }
        public Builder exportLocations(List<GetShareExportLocation> exportLocations) {
            this.exportLocations = Objects.requireNonNull(exportLocations);
            return this;
        }
        public Builder exportLocations(GetShareExportLocation... exportLocations) {
            return exportLocations(List.of(exportLocations));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isPublic(Boolean isPublic) {
            this.isPublic = Objects.requireNonNull(isPublic);
            return this;
        }
        public Builder metadata(Map<String,Object> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder shareNetworkId(String shareNetworkId) {
            this.shareNetworkId = Objects.requireNonNull(shareNetworkId);
            return this;
        }
        public Builder shareProto(String shareProto) {
            this.shareProto = Objects.requireNonNull(shareProto);
            return this;
        }
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public GetShareResult build() {
            return new GetShareResult(availabilityZone, description, exportLocationPath, exportLocations, id, isPublic, metadata, name, projectId, region, shareNetworkId, shareProto, size, snapshotId, status);
        }
    }
}
