// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.openstack.networking.outputs.GetPortAllowedAddressPair;
import com.pulumi.openstack.networking.outputs.GetPortBinding;
import com.pulumi.openstack.networking.outputs.GetPortExtraDhcpOption;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPortResult {
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable Boolean adminStateUp;
    /**
     * @return The collection of Fixed IP addresses on the port in the
     * order returned by the Network v2 API.
     * 
     */
    private final List<String> allFixedIps;
    /**
     * @return The set of security group IDs applied on the port.
     * 
     */
    private final List<String> allSecurityGroupIds;
    /**
     * @return The set of string tags applied on the port.
     * 
     */
    private final List<String> allTags;
    /**
     * @return An IP/MAC Address pair of additional IP
     * addresses that can be active on this port. The structure is described
     * below.
     * 
     */
    private final List<GetPortAllowedAddressPair> allowedAddressPairs;
    /**
     * @return The port binding information. The structure is described below.
     * 
     */
    private final List<GetPortBinding> bindings;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String description;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String deviceId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String deviceOwner;
    /**
     * @return The list of maps representing port DNS assignments.
     * 
     */
    private final List<Map<String,Object>> dnsAssignments;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String dnsName;
    /**
     * @return An extra DHCP option configured on the port.
     * The structure is described below.
     * 
     */
    private final List<GetPortExtraDhcpOption> extraDhcpOptions;
    private final @Nullable String fixedIp;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The additional MAC address.
     * 
     */
    private final @Nullable String macAddress;
    /**
     * @return Name of the DHCP option.
     * 
     */
    private final @Nullable String name;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String networkId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String portId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String projectId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final @Nullable String region;
    private final @Nullable List<String> securityGroupIds;
    private final @Nullable String status;
    private final @Nullable List<String> tags;
    private final @Nullable String tenantId;

    @CustomType.Constructor
    private GetPortResult(
        @CustomType.Parameter("adminStateUp") @Nullable Boolean adminStateUp,
        @CustomType.Parameter("allFixedIps") List<String> allFixedIps,
        @CustomType.Parameter("allSecurityGroupIds") List<String> allSecurityGroupIds,
        @CustomType.Parameter("allTags") List<String> allTags,
        @CustomType.Parameter("allowedAddressPairs") List<GetPortAllowedAddressPair> allowedAddressPairs,
        @CustomType.Parameter("bindings") List<GetPortBinding> bindings,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("deviceId") @Nullable String deviceId,
        @CustomType.Parameter("deviceOwner") @Nullable String deviceOwner,
        @CustomType.Parameter("dnsAssignments") List<Map<String,Object>> dnsAssignments,
        @CustomType.Parameter("dnsName") @Nullable String dnsName,
        @CustomType.Parameter("extraDhcpOptions") List<GetPortExtraDhcpOption> extraDhcpOptions,
        @CustomType.Parameter("fixedIp") @Nullable String fixedIp,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("macAddress") @Nullable String macAddress,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("networkId") @Nullable String networkId,
        @CustomType.Parameter("portId") @Nullable String portId,
        @CustomType.Parameter("projectId") @Nullable String projectId,
        @CustomType.Parameter("region") @Nullable String region,
        @CustomType.Parameter("securityGroupIds") @Nullable List<String> securityGroupIds,
        @CustomType.Parameter("status") @Nullable String status,
        @CustomType.Parameter("tags") @Nullable List<String> tags,
        @CustomType.Parameter("tenantId") @Nullable String tenantId) {
        this.adminStateUp = adminStateUp;
        this.allFixedIps = allFixedIps;
        this.allSecurityGroupIds = allSecurityGroupIds;
        this.allTags = allTags;
        this.allowedAddressPairs = allowedAddressPairs;
        this.bindings = bindings;
        this.description = description;
        this.deviceId = deviceId;
        this.deviceOwner = deviceOwner;
        this.dnsAssignments = dnsAssignments;
        this.dnsName = dnsName;
        this.extraDhcpOptions = extraDhcpOptions;
        this.fixedIp = fixedIp;
        this.id = id;
        this.macAddress = macAddress;
        this.name = name;
        this.networkId = networkId;
        this.portId = portId;
        this.projectId = projectId;
        this.region = region;
        this.securityGroupIds = securityGroupIds;
        this.status = status;
        this.tags = tags;
        this.tenantId = tenantId;
    }

    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<Boolean> adminStateUp() {
        return Optional.ofNullable(this.adminStateUp);
    }
    /**
     * @return The collection of Fixed IP addresses on the port in the
     * order returned by the Network v2 API.
     * 
     */
    public List<String> allFixedIps() {
        return this.allFixedIps;
    }
    /**
     * @return The set of security group IDs applied on the port.
     * 
     */
    public List<String> allSecurityGroupIds() {
        return this.allSecurityGroupIds;
    }
    /**
     * @return The set of string tags applied on the port.
     * 
     */
    public List<String> allTags() {
        return this.allTags;
    }
    /**
     * @return An IP/MAC Address pair of additional IP
     * addresses that can be active on this port. The structure is described
     * below.
     * 
     */
    public List<GetPortAllowedAddressPair> allowedAddressPairs() {
        return this.allowedAddressPairs;
    }
    /**
     * @return The port binding information. The structure is described below.
     * 
     */
    public List<GetPortBinding> bindings() {
        return this.bindings;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> deviceOwner() {
        return Optional.ofNullable(this.deviceOwner);
    }
    /**
     * @return The list of maps representing port DNS assignments.
     * 
     */
    public List<Map<String,Object>> dnsAssignments() {
        return this.dnsAssignments;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }
    /**
     * @return An extra DHCP option configured on the port.
     * The structure is described below.
     * 
     */
    public List<GetPortExtraDhcpOption> extraDhcpOptions() {
        return this.extraDhcpOptions;
    }
    public Optional<String> fixedIp() {
        return Optional.ofNullable(this.fixedIp);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The additional MAC address.
     * 
     */
    public Optional<String> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }
    /**
     * @return Name of the DHCP option.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> networkId() {
        return Optional.ofNullable(this.networkId);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> portId() {
        return Optional.ofNullable(this.portId);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPortResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean adminStateUp;
        private List<String> allFixedIps;
        private List<String> allSecurityGroupIds;
        private List<String> allTags;
        private List<GetPortAllowedAddressPair> allowedAddressPairs;
        private List<GetPortBinding> bindings;
        private @Nullable String description;
        private @Nullable String deviceId;
        private @Nullable String deviceOwner;
        private List<Map<String,Object>> dnsAssignments;
        private @Nullable String dnsName;
        private List<GetPortExtraDhcpOption> extraDhcpOptions;
        private @Nullable String fixedIp;
        private String id;
        private @Nullable String macAddress;
        private @Nullable String name;
        private @Nullable String networkId;
        private @Nullable String portId;
        private @Nullable String projectId;
        private @Nullable String region;
        private @Nullable List<String> securityGroupIds;
        private @Nullable String status;
        private @Nullable List<String> tags;
        private @Nullable String tenantId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPortResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminStateUp = defaults.adminStateUp;
    	      this.allFixedIps = defaults.allFixedIps;
    	      this.allSecurityGroupIds = defaults.allSecurityGroupIds;
    	      this.allTags = defaults.allTags;
    	      this.allowedAddressPairs = defaults.allowedAddressPairs;
    	      this.bindings = defaults.bindings;
    	      this.description = defaults.description;
    	      this.deviceId = defaults.deviceId;
    	      this.deviceOwner = defaults.deviceOwner;
    	      this.dnsAssignments = defaults.dnsAssignments;
    	      this.dnsName = defaults.dnsName;
    	      this.extraDhcpOptions = defaults.extraDhcpOptions;
    	      this.fixedIp = defaults.fixedIp;
    	      this.id = defaults.id;
    	      this.macAddress = defaults.macAddress;
    	      this.name = defaults.name;
    	      this.networkId = defaults.networkId;
    	      this.portId = defaults.portId;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
        }

        public Builder adminStateUp(@Nullable Boolean adminStateUp) {
            this.adminStateUp = adminStateUp;
            return this;
        }
        public Builder allFixedIps(List<String> allFixedIps) {
            this.allFixedIps = Objects.requireNonNull(allFixedIps);
            return this;
        }
        public Builder allFixedIps(String... allFixedIps) {
            return allFixedIps(List.of(allFixedIps));
        }
        public Builder allSecurityGroupIds(List<String> allSecurityGroupIds) {
            this.allSecurityGroupIds = Objects.requireNonNull(allSecurityGroupIds);
            return this;
        }
        public Builder allSecurityGroupIds(String... allSecurityGroupIds) {
            return allSecurityGroupIds(List.of(allSecurityGroupIds));
        }
        public Builder allTags(List<String> allTags) {
            this.allTags = Objects.requireNonNull(allTags);
            return this;
        }
        public Builder allTags(String... allTags) {
            return allTags(List.of(allTags));
        }
        public Builder allowedAddressPairs(List<GetPortAllowedAddressPair> allowedAddressPairs) {
            this.allowedAddressPairs = Objects.requireNonNull(allowedAddressPairs);
            return this;
        }
        public Builder allowedAddressPairs(GetPortAllowedAddressPair... allowedAddressPairs) {
            return allowedAddressPairs(List.of(allowedAddressPairs));
        }
        public Builder bindings(List<GetPortBinding> bindings) {
            this.bindings = Objects.requireNonNull(bindings);
            return this;
        }
        public Builder bindings(GetPortBinding... bindings) {
            return bindings(List.of(bindings));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder deviceId(@Nullable String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        public Builder deviceOwner(@Nullable String deviceOwner) {
            this.deviceOwner = deviceOwner;
            return this;
        }
        public Builder dnsAssignments(List<Map<String,Object>> dnsAssignments) {
            this.dnsAssignments = Objects.requireNonNull(dnsAssignments);
            return this;
        }
        public Builder dnsName(@Nullable String dnsName) {
            this.dnsName = dnsName;
            return this;
        }
        public Builder extraDhcpOptions(List<GetPortExtraDhcpOption> extraDhcpOptions) {
            this.extraDhcpOptions = Objects.requireNonNull(extraDhcpOptions);
            return this;
        }
        public Builder extraDhcpOptions(GetPortExtraDhcpOption... extraDhcpOptions) {
            return extraDhcpOptions(List.of(extraDhcpOptions));
        }
        public Builder fixedIp(@Nullable String fixedIp) {
            this.fixedIp = fixedIp;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder macAddress(@Nullable String macAddress) {
            this.macAddress = macAddress;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder networkId(@Nullable String networkId) {
            this.networkId = networkId;
            return this;
        }
        public Builder portId(@Nullable String portId) {
            this.portId = portId;
            return this;
        }
        public Builder projectId(@Nullable String projectId) {
            this.projectId = projectId;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }        public GetPortResult build() {
            return new GetPortResult(adminStateUp, allFixedIps, allSecurityGroupIds, allTags, allowedAddressPairs, bindings, description, deviceId, deviceOwner, dnsAssignments, dnsName, extraDhcpOptions, fixedIp, id, macAddress, name, networkId, portId, projectId, region, securityGroupIds, status, tags, tenantId);
        }
    }
}
