// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.openstack.networking.outputs.GetSubnetAllocationPool;
import com.pulumi.openstack.networking.outputs.GetSubnetHostRoute;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubnetResult {
    /**
     * @return A set of string tags applied on the subnet.
     * 
     */
    private final List<String> allTags;
    /**
     * @return Allocation pools of the subnet.
     * 
     */
    private final List<GetSubnetAllocationPool> allocationPools;
    private final String cidr;
    private final String description;
    /**
     * @deprecated
     * use dhcp_enabled instead
     * 
     */
    @Deprecated /* use dhcp_enabled instead */
    private final @Nullable Boolean dhcpDisabled;
    private final @Nullable Boolean dhcpEnabled;
    /**
     * @return DNS Nameservers of the subnet.
     * 
     */
    private final List<String> dnsNameservers;
    /**
     * @return Whether the subnet has DHCP enabled or not.
     * 
     */
    private final Boolean enableDhcp;
    private final String gatewayIp;
    /**
     * @return Host Routes of the subnet.
     * 
     */
    private final List<GetSubnetHostRoute> hostRoutes;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final Integer ipVersion;
    private final String ipv6AddressMode;
    private final String ipv6RaMode;
    private final String name;
    private final String networkId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String region;
    private final String subnetId;
    private final String subnetpoolId;
    private final @Nullable List<String> tags;
    private final String tenantId;

    @CustomType.Constructor
    private GetSubnetResult(
        @CustomType.Parameter("allTags") List<String> allTags,
        @CustomType.Parameter("allocationPools") List<GetSubnetAllocationPool> allocationPools,
        @CustomType.Parameter("cidr") String cidr,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("dhcpDisabled") @Nullable Boolean dhcpDisabled,
        @CustomType.Parameter("dhcpEnabled") @Nullable Boolean dhcpEnabled,
        @CustomType.Parameter("dnsNameservers") List<String> dnsNameservers,
        @CustomType.Parameter("enableDhcp") Boolean enableDhcp,
        @CustomType.Parameter("gatewayIp") String gatewayIp,
        @CustomType.Parameter("hostRoutes") List<GetSubnetHostRoute> hostRoutes,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ipVersion") Integer ipVersion,
        @CustomType.Parameter("ipv6AddressMode") String ipv6AddressMode,
        @CustomType.Parameter("ipv6RaMode") String ipv6RaMode,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networkId") String networkId,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("subnetId") String subnetId,
        @CustomType.Parameter("subnetpoolId") String subnetpoolId,
        @CustomType.Parameter("tags") @Nullable List<String> tags,
        @CustomType.Parameter("tenantId") String tenantId) {
        this.allTags = allTags;
        this.allocationPools = allocationPools;
        this.cidr = cidr;
        this.description = description;
        this.dhcpDisabled = dhcpDisabled;
        this.dhcpEnabled = dhcpEnabled;
        this.dnsNameservers = dnsNameservers;
        this.enableDhcp = enableDhcp;
        this.gatewayIp = gatewayIp;
        this.hostRoutes = hostRoutes;
        this.id = id;
        this.ipVersion = ipVersion;
        this.ipv6AddressMode = ipv6AddressMode;
        this.ipv6RaMode = ipv6RaMode;
        this.name = name;
        this.networkId = networkId;
        this.region = region;
        this.subnetId = subnetId;
        this.subnetpoolId = subnetpoolId;
        this.tags = tags;
        this.tenantId = tenantId;
    }

    /**
     * @return A set of string tags applied on the subnet.
     * 
     */
    public List<String> allTags() {
        return this.allTags;
    }
    /**
     * @return Allocation pools of the subnet.
     * 
     */
    public List<GetSubnetAllocationPool> allocationPools() {
        return this.allocationPools;
    }
    public String cidr() {
        return this.cidr;
    }
    public String description() {
        return this.description;
    }
    /**
     * @deprecated
     * use dhcp_enabled instead
     * 
     */
    @Deprecated /* use dhcp_enabled instead */
    public Optional<Boolean> dhcpDisabled() {
        return Optional.ofNullable(this.dhcpDisabled);
    }
    public Optional<Boolean> dhcpEnabled() {
        return Optional.ofNullable(this.dhcpEnabled);
    }
    /**
     * @return DNS Nameservers of the subnet.
     * 
     */
    public List<String> dnsNameservers() {
        return this.dnsNameservers;
    }
    /**
     * @return Whether the subnet has DHCP enabled or not.
     * 
     */
    public Boolean enableDhcp() {
        return this.enableDhcp;
    }
    public String gatewayIp() {
        return this.gatewayIp;
    }
    /**
     * @return Host Routes of the subnet.
     * 
     */
    public List<GetSubnetHostRoute> hostRoutes() {
        return this.hostRoutes;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer ipVersion() {
        return this.ipVersion;
    }
    public String ipv6AddressMode() {
        return this.ipv6AddressMode;
    }
    public String ipv6RaMode() {
        return this.ipv6RaMode;
    }
    public String name() {
        return this.name;
    }
    public String networkId() {
        return this.networkId;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    public String subnetId() {
        return this.subnetId;
    }
    public String subnetpoolId() {
        return this.subnetpoolId;
    }
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public String tenantId() {
        return this.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> allTags;
        private List<GetSubnetAllocationPool> allocationPools;
        private String cidr;
        private String description;
        private @Nullable Boolean dhcpDisabled;
        private @Nullable Boolean dhcpEnabled;
        private List<String> dnsNameservers;
        private Boolean enableDhcp;
        private String gatewayIp;
        private List<GetSubnetHostRoute> hostRoutes;
        private String id;
        private Integer ipVersion;
        private String ipv6AddressMode;
        private String ipv6RaMode;
        private String name;
        private String networkId;
        private String region;
        private String subnetId;
        private String subnetpoolId;
        private @Nullable List<String> tags;
        private String tenantId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSubnetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allTags = defaults.allTags;
    	      this.allocationPools = defaults.allocationPools;
    	      this.cidr = defaults.cidr;
    	      this.description = defaults.description;
    	      this.dhcpDisabled = defaults.dhcpDisabled;
    	      this.dhcpEnabled = defaults.dhcpEnabled;
    	      this.dnsNameservers = defaults.dnsNameservers;
    	      this.enableDhcp = defaults.enableDhcp;
    	      this.gatewayIp = defaults.gatewayIp;
    	      this.hostRoutes = defaults.hostRoutes;
    	      this.id = defaults.id;
    	      this.ipVersion = defaults.ipVersion;
    	      this.ipv6AddressMode = defaults.ipv6AddressMode;
    	      this.ipv6RaMode = defaults.ipv6RaMode;
    	      this.name = defaults.name;
    	      this.networkId = defaults.networkId;
    	      this.region = defaults.region;
    	      this.subnetId = defaults.subnetId;
    	      this.subnetpoolId = defaults.subnetpoolId;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
        }

        public Builder allTags(List<String> allTags) {
            this.allTags = Objects.requireNonNull(allTags);
            return this;
        }
        public Builder allTags(String... allTags) {
            return allTags(List.of(allTags));
        }
        public Builder allocationPools(List<GetSubnetAllocationPool> allocationPools) {
            this.allocationPools = Objects.requireNonNull(allocationPools);
            return this;
        }
        public Builder allocationPools(GetSubnetAllocationPool... allocationPools) {
            return allocationPools(List.of(allocationPools));
        }
        public Builder cidr(String cidr) {
            this.cidr = Objects.requireNonNull(cidr);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder dhcpDisabled(@Nullable Boolean dhcpDisabled) {
            this.dhcpDisabled = dhcpDisabled;
            return this;
        }
        public Builder dhcpEnabled(@Nullable Boolean dhcpEnabled) {
            this.dhcpEnabled = dhcpEnabled;
            return this;
        }
        public Builder dnsNameservers(List<String> dnsNameservers) {
            this.dnsNameservers = Objects.requireNonNull(dnsNameservers);
            return this;
        }
        public Builder dnsNameservers(String... dnsNameservers) {
            return dnsNameservers(List.of(dnsNameservers));
        }
        public Builder enableDhcp(Boolean enableDhcp) {
            this.enableDhcp = Objects.requireNonNull(enableDhcp);
            return this;
        }
        public Builder gatewayIp(String gatewayIp) {
            this.gatewayIp = Objects.requireNonNull(gatewayIp);
            return this;
        }
        public Builder hostRoutes(List<GetSubnetHostRoute> hostRoutes) {
            this.hostRoutes = Objects.requireNonNull(hostRoutes);
            return this;
        }
        public Builder hostRoutes(GetSubnetHostRoute... hostRoutes) {
            return hostRoutes(List.of(hostRoutes));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ipVersion(Integer ipVersion) {
            this.ipVersion = Objects.requireNonNull(ipVersion);
            return this;
        }
        public Builder ipv6AddressMode(String ipv6AddressMode) {
            this.ipv6AddressMode = Objects.requireNonNull(ipv6AddressMode);
            return this;
        }
        public Builder ipv6RaMode(String ipv6RaMode) {
            this.ipv6RaMode = Objects.requireNonNull(ipv6RaMode);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkId(String networkId) {
            this.networkId = Objects.requireNonNull(networkId);
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder subnetpoolId(String subnetpoolId) {
            this.subnetpoolId = Objects.requireNonNull(subnetpoolId);
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }        public GetSubnetResult build() {
            return new GetSubnetResult(allTags, allocationPools, cidr, description, dhcpDisabled, dhcpEnabled, dnsNameservers, enableDhcp, gatewayIp, hostRoutes, id, ipVersion, ipv6AddressMode, ipv6RaMode, name, networkId, region, subnetId, subnetpoolId, tags, tenantId);
        }
    }
}
