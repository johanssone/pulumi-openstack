// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.networking.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFloatingIpResult {
    private final @Nullable String address;
    /**
     * @return A set of string tags applied on the floating IP.
     * 
     */
    private final List<String> allTags;
    private final @Nullable String description;
    /**
     * @return The floating IP DNS domain. Available, when Neutron DNS
     * extension is enabled.
     * 
     */
    private final String dnsDomain;
    /**
     * @return The floating IP DNS name. Available, when Neutron DNS extension
     * is enabled.
     * 
     */
    private final String dnsName;
    private final @Nullable String fixedIp;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final @Nullable String pool;
    private final @Nullable String portId;
    private final @Nullable String region;
    private final @Nullable String status;
    private final @Nullable List<String> tags;
    private final @Nullable String tenantId;

    @CustomType.Constructor
    private GetFloatingIpResult(
        @CustomType.Parameter("address") @Nullable String address,
        @CustomType.Parameter("allTags") List<String> allTags,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("dnsDomain") String dnsDomain,
        @CustomType.Parameter("dnsName") String dnsName,
        @CustomType.Parameter("fixedIp") @Nullable String fixedIp,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("pool") @Nullable String pool,
        @CustomType.Parameter("portId") @Nullable String portId,
        @CustomType.Parameter("region") @Nullable String region,
        @CustomType.Parameter("status") @Nullable String status,
        @CustomType.Parameter("tags") @Nullable List<String> tags,
        @CustomType.Parameter("tenantId") @Nullable String tenantId) {
        this.address = address;
        this.allTags = allTags;
        this.description = description;
        this.dnsDomain = dnsDomain;
        this.dnsName = dnsName;
        this.fixedIp = fixedIp;
        this.id = id;
        this.pool = pool;
        this.portId = portId;
        this.region = region;
        this.status = status;
        this.tags = tags;
        this.tenantId = tenantId;
    }

    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }
    /**
     * @return A set of string tags applied on the floating IP.
     * 
     */
    public List<String> allTags() {
        return this.allTags;
    }
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The floating IP DNS domain. Available, when Neutron DNS
     * extension is enabled.
     * 
     */
    public String dnsDomain() {
        return this.dnsDomain;
    }
    /**
     * @return The floating IP DNS name. Available, when Neutron DNS extension
     * is enabled.
     * 
     */
    public String dnsName() {
        return this.dnsName;
    }
    public Optional<String> fixedIp() {
        return Optional.ofNullable(this.fixedIp);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> pool() {
        return Optional.ofNullable(this.pool);
    }
    public Optional<String> portId() {
        return Optional.ofNullable(this.portId);
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFloatingIpResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String address;
        private List<String> allTags;
        private @Nullable String description;
        private String dnsDomain;
        private String dnsName;
        private @Nullable String fixedIp;
        private String id;
        private @Nullable String pool;
        private @Nullable String portId;
        private @Nullable String region;
        private @Nullable String status;
        private @Nullable List<String> tags;
        private @Nullable String tenantId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFloatingIpResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.allTags = defaults.allTags;
    	      this.description = defaults.description;
    	      this.dnsDomain = defaults.dnsDomain;
    	      this.dnsName = defaults.dnsName;
    	      this.fixedIp = defaults.fixedIp;
    	      this.id = defaults.id;
    	      this.pool = defaults.pool;
    	      this.portId = defaults.portId;
    	      this.region = defaults.region;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
        }

        public Builder address(@Nullable String address) {
            this.address = address;
            return this;
        }
        public Builder allTags(List<String> allTags) {
            this.allTags = Objects.requireNonNull(allTags);
            return this;
        }
        public Builder allTags(String... allTags) {
            return allTags(List.of(allTags));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder dnsDomain(String dnsDomain) {
            this.dnsDomain = Objects.requireNonNull(dnsDomain);
            return this;
        }
        public Builder dnsName(String dnsName) {
            this.dnsName = Objects.requireNonNull(dnsName);
            return this;
        }
        public Builder fixedIp(@Nullable String fixedIp) {
            this.fixedIp = fixedIp;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder pool(@Nullable String pool) {
            this.pool = pool;
            return this;
        }
        public Builder portId(@Nullable String portId) {
            this.portId = portId;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }        public GetFloatingIpResult build() {
            return new GetFloatingIpResult(address, allTags, description, dnsDomain, dnsName, fixedIp, id, pool, portId, region, status, tags, tenantId);
        }
    }
}
