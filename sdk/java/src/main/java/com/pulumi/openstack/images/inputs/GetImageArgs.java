// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.images.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImageArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImageArgs Empty = new GetImageArgs();

    /**
     * Whether or not the image is hidden from public list.
     * 
     */
    @Import(name="hidden")
    private @Nullable Output<Boolean> hidden;

    /**
     * @return Whether or not the image is hidden from public list.
     * 
     */
    public Optional<Output<Boolean>> hidden() {
        return Optional.ofNullable(this.hidden);
    }

    /**
     * The status of the image. Must be one of
     * &#34;accepted&#34;, &#34;pending&#34;, &#34;rejected&#34;, or &#34;all&#34;.
     * 
     */
    @Import(name="memberStatus")
    private @Nullable Output<String> memberStatus;

    /**
     * @return The status of the image. Must be one of
     * &#34;accepted&#34;, &#34;pending&#34;, &#34;rejected&#34;, or &#34;all&#34;.
     * 
     */
    public Optional<Output<String>> memberStatus() {
        return Optional.ofNullable(this.memberStatus);
    }

    /**
     * If more than one result is returned, use the most
     * recent image.
     * 
     */
    @Import(name="mostRecent")
    private @Nullable Output<Boolean> mostRecent;

    /**
     * @return If more than one result is returned, use the most
     * recent image.
     * 
     */
    public Optional<Output<Boolean>> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }

    /**
     * The name of the image.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the image.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The owner (UUID) of the image.
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return The owner (UUID) of the image.
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * a map of key/value pairs to match an image with.
     * All specified properties must be matched. Unlike other options filtering
     * by `properties` does by client on the result of OpenStack search query.
     * Filtering is applied if server responce contains at least 2 images. In
     * case there is only one image the `properties` ignores.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,Object>> properties;

    /**
     * @return a map of key/value pairs to match an image with.
     * All specified properties must be matched. Unlike other options filtering
     * by `properties` does by client on the result of OpenStack search query.
     * Filtering is applied if server responce contains at least 2 images. In
     * case there is only one image the `properties` ignores.
     * 
     */
    public Optional<Output<Map<String,Object>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The region in which to obtain the V2 Glance client.
     * A Glance client is needed to create an Image that can be used with
     * a compute instance. If omitted, the `region` argument of the provider
     * is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region in which to obtain the V2 Glance client.
     * A Glance client is needed to create an Image that can be used with
     * a compute instance. If omitted, the `region` argument of the provider
     * is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The maximum size (in bytes) of the image to return.
     * 
     */
    @Import(name="sizeMax")
    private @Nullable Output<Integer> sizeMax;

    /**
     * @return The maximum size (in bytes) of the image to return.
     * 
     */
    public Optional<Output<Integer>> sizeMax() {
        return Optional.ofNullable(this.sizeMax);
    }

    /**
     * The minimum size (in bytes) of the image to return.
     * 
     */
    @Import(name="sizeMin")
    private @Nullable Output<Integer> sizeMin;

    /**
     * @return The minimum size (in bytes) of the image to return.
     * 
     */
    public Optional<Output<Integer>> sizeMin() {
        return Optional.ofNullable(this.sizeMin);
    }

    /**
     * Order the results in either `asc` or `desc`.
     * 
     */
    @Import(name="sortDirection")
    private @Nullable Output<String> sortDirection;

    /**
     * @return Order the results in either `asc` or `desc`.
     * 
     */
    public Optional<Output<String>> sortDirection() {
        return Optional.ofNullable(this.sortDirection);
    }

    /**
     * Sort images based on a certain key. Defaults to `name`.
     * 
     */
    @Import(name="sortKey")
    private @Nullable Output<String> sortKey;

    /**
     * @return Sort images based on a certain key. Defaults to `name`.
     * 
     */
    public Optional<Output<String>> sortKey() {
        return Optional.ofNullable(this.sortKey);
    }

    /**
     * Search for images with a specific tag.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return Search for images with a specific tag.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * The visibility of the image. Must be one of
     * &#34;public&#34;, &#34;private&#34;, &#34;community&#34;, or &#34;shared&#34;. Defaults to &#34;private&#34;.
     * 
     */
    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    /**
     * @return The visibility of the image. Must be one of
     * &#34;public&#34;, &#34;private&#34;, &#34;community&#34;, or &#34;shared&#34;. Defaults to &#34;private&#34;.
     * 
     */
    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private GetImageArgs() {}

    private GetImageArgs(GetImageArgs $) {
        this.hidden = $.hidden;
        this.memberStatus = $.memberStatus;
        this.mostRecent = $.mostRecent;
        this.name = $.name;
        this.owner = $.owner;
        this.properties = $.properties;
        this.region = $.region;
        this.sizeMax = $.sizeMax;
        this.sizeMin = $.sizeMin;
        this.sortDirection = $.sortDirection;
        this.sortKey = $.sortKey;
        this.tag = $.tag;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImageArgs $;

        public Builder() {
            $ = new GetImageArgs();
        }

        public Builder(GetImageArgs defaults) {
            $ = new GetImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hidden Whether or not the image is hidden from public list.
         * 
         * @return builder
         * 
         */
        public Builder hidden(@Nullable Output<Boolean> hidden) {
            $.hidden = hidden;
            return this;
        }

        /**
         * @param hidden Whether or not the image is hidden from public list.
         * 
         * @return builder
         * 
         */
        public Builder hidden(Boolean hidden) {
            return hidden(Output.of(hidden));
        }

        /**
         * @param memberStatus The status of the image. Must be one of
         * &#34;accepted&#34;, &#34;pending&#34;, &#34;rejected&#34;, or &#34;all&#34;.
         * 
         * @return builder
         * 
         */
        public Builder memberStatus(@Nullable Output<String> memberStatus) {
            $.memberStatus = memberStatus;
            return this;
        }

        /**
         * @param memberStatus The status of the image. Must be one of
         * &#34;accepted&#34;, &#34;pending&#34;, &#34;rejected&#34;, or &#34;all&#34;.
         * 
         * @return builder
         * 
         */
        public Builder memberStatus(String memberStatus) {
            return memberStatus(Output.of(memberStatus));
        }

        /**
         * @param mostRecent If more than one result is returned, use the most
         * recent image.
         * 
         * @return builder
         * 
         */
        public Builder mostRecent(@Nullable Output<Boolean> mostRecent) {
            $.mostRecent = mostRecent;
            return this;
        }

        /**
         * @param mostRecent If more than one result is returned, use the most
         * recent image.
         * 
         * @return builder
         * 
         */
        public Builder mostRecent(Boolean mostRecent) {
            return mostRecent(Output.of(mostRecent));
        }

        /**
         * @param name The name of the image.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the image.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param owner The owner (UUID) of the image.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner The owner (UUID) of the image.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param properties a map of key/value pairs to match an image with.
         * All specified properties must be matched. Unlike other options filtering
         * by `properties` does by client on the result of OpenStack search query.
         * Filtering is applied if server responce contains at least 2 images. In
         * case there is only one image the `properties` ignores.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,Object>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties a map of key/value pairs to match an image with.
         * All specified properties must be matched. Unlike other options filtering
         * by `properties` does by client on the result of OpenStack search query.
         * Filtering is applied if server responce contains at least 2 images. In
         * case there is only one image the `properties` ignores.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,Object> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param region The region in which to obtain the V2 Glance client.
         * A Glance client is needed to create an Image that can be used with
         * a compute instance. If omitted, the `region` argument of the provider
         * is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which to obtain the V2 Glance client.
         * A Glance client is needed to create an Image that can be used with
         * a compute instance. If omitted, the `region` argument of the provider
         * is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sizeMax The maximum size (in bytes) of the image to return.
         * 
         * @return builder
         * 
         */
        public Builder sizeMax(@Nullable Output<Integer> sizeMax) {
            $.sizeMax = sizeMax;
            return this;
        }

        /**
         * @param sizeMax The maximum size (in bytes) of the image to return.
         * 
         * @return builder
         * 
         */
        public Builder sizeMax(Integer sizeMax) {
            return sizeMax(Output.of(sizeMax));
        }

        /**
         * @param sizeMin The minimum size (in bytes) of the image to return.
         * 
         * @return builder
         * 
         */
        public Builder sizeMin(@Nullable Output<Integer> sizeMin) {
            $.sizeMin = sizeMin;
            return this;
        }

        /**
         * @param sizeMin The minimum size (in bytes) of the image to return.
         * 
         * @return builder
         * 
         */
        public Builder sizeMin(Integer sizeMin) {
            return sizeMin(Output.of(sizeMin));
        }

        /**
         * @param sortDirection Order the results in either `asc` or `desc`.
         * 
         * @return builder
         * 
         */
        public Builder sortDirection(@Nullable Output<String> sortDirection) {
            $.sortDirection = sortDirection;
            return this;
        }

        /**
         * @param sortDirection Order the results in either `asc` or `desc`.
         * 
         * @return builder
         * 
         */
        public Builder sortDirection(String sortDirection) {
            return sortDirection(Output.of(sortDirection));
        }

        /**
         * @param sortKey Sort images based on a certain key. Defaults to `name`.
         * 
         * @return builder
         * 
         */
        public Builder sortKey(@Nullable Output<String> sortKey) {
            $.sortKey = sortKey;
            return this;
        }

        /**
         * @param sortKey Sort images based on a certain key. Defaults to `name`.
         * 
         * @return builder
         * 
         */
        public Builder sortKey(String sortKey) {
            return sortKey(Output.of(sortKey));
        }

        /**
         * @param tag Search for images with a specific tag.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag Search for images with a specific tag.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        /**
         * @param visibility The visibility of the image. Must be one of
         * &#34;public&#34;, &#34;private&#34;, &#34;community&#34;, or &#34;shared&#34;. Defaults to &#34;private&#34;.
         * 
         * @return builder
         * 
         */
        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        /**
         * @param visibility The visibility of the image. Must be one of
         * &#34;public&#34;, &#34;private&#34;, &#34;community&#34;, or &#34;shared&#34;. Defaults to &#34;private&#34;.
         * 
         * @return builder
         * 
         */
        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public GetImageArgs build() {
            return $;
        }
    }

}
