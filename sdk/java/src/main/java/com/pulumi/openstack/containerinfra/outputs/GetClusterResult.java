// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.containerinfra.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterResult {
    /**
     * @return COE API address.
     * 
     */
    private final String apiAddress;
    /**
     * @return The UUID of the V1 Container Infra cluster template.
     * 
     */
    private final String clusterTemplateId;
    /**
     * @return COE software version.
     * 
     */
    private final String coeVersion;
    private final String containerVersion;
    /**
     * @return The timeout (in minutes) for creating the cluster.
     * 
     */
    private final Integer createTimeout;
    /**
     * @return The time at which cluster was created.
     * 
     */
    private final String createdAt;
    /**
     * @return The URL used for cluster node discovery.
     * 
     */
    private final String discoveryUrl;
    /**
     * @return The size (in GB) of the Docker volume.
     * 
     */
    private final Integer dockerVolumeSize;
    /**
     * @return The fixed network that is attached to the cluster.
     * 
     */
    private final String fixedNetwork;
    /**
     * @return The fixed subnet that is attached to the cluster.
     * 
     */
    private final String fixedSubnet;
    /**
     * @return The flavor for the nodes of the cluster.
     * 
     */
    private final String flavor;
    private final Boolean floatingIpEnabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The name of the Compute service SSH keypair.
     * 
     */
    private final String keypair;
    /**
     * @return The list of key value pairs representing additional properties of
     * the cluster.
     * 
     */
    private final Map<String,Object> labels;
    /**
     * @return IP addresses of the master node of the cluster.
     * 
     */
    private final List<String> masterAddresses;
    /**
     * @return The number of master nodes for the cluster.
     * 
     */
    private final Integer masterCount;
    /**
     * @return The flavor for the master nodes.
     * 
     */
    private final String masterFlavor;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String name;
    /**
     * @return IP addresses of the node of the cluster.
     * 
     */
    private final List<String> nodeAddresses;
    /**
     * @return The number of nodes for the cluster.
     * 
     */
    private final Integer nodeCount;
    /**
     * @return The project of the cluster.
     * 
     */
    private final String projectId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String region;
    /**
     * @return UUID of the Orchestration service stack.
     * 
     */
    private final String stackId;
    /**
     * @return The time at which cluster was updated.
     * 
     */
    private final String updatedAt;
    /**
     * @return The user of the cluster.
     * 
     */
    private final String userId;

    @CustomType.Constructor
    private GetClusterResult(
        @CustomType.Parameter("apiAddress") String apiAddress,
        @CustomType.Parameter("clusterTemplateId") String clusterTemplateId,
        @CustomType.Parameter("coeVersion") String coeVersion,
        @CustomType.Parameter("containerVersion") String containerVersion,
        @CustomType.Parameter("createTimeout") Integer createTimeout,
        @CustomType.Parameter("createdAt") String createdAt,
        @CustomType.Parameter("discoveryUrl") String discoveryUrl,
        @CustomType.Parameter("dockerVolumeSize") Integer dockerVolumeSize,
        @CustomType.Parameter("fixedNetwork") String fixedNetwork,
        @CustomType.Parameter("fixedSubnet") String fixedSubnet,
        @CustomType.Parameter("flavor") String flavor,
        @CustomType.Parameter("floatingIpEnabled") Boolean floatingIpEnabled,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("keypair") String keypair,
        @CustomType.Parameter("labels") Map<String,Object> labels,
        @CustomType.Parameter("masterAddresses") List<String> masterAddresses,
        @CustomType.Parameter("masterCount") Integer masterCount,
        @CustomType.Parameter("masterFlavor") String masterFlavor,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nodeAddresses") List<String> nodeAddresses,
        @CustomType.Parameter("nodeCount") Integer nodeCount,
        @CustomType.Parameter("projectId") String projectId,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("stackId") String stackId,
        @CustomType.Parameter("updatedAt") String updatedAt,
        @CustomType.Parameter("userId") String userId) {
        this.apiAddress = apiAddress;
        this.clusterTemplateId = clusterTemplateId;
        this.coeVersion = coeVersion;
        this.containerVersion = containerVersion;
        this.createTimeout = createTimeout;
        this.createdAt = createdAt;
        this.discoveryUrl = discoveryUrl;
        this.dockerVolumeSize = dockerVolumeSize;
        this.fixedNetwork = fixedNetwork;
        this.fixedSubnet = fixedSubnet;
        this.flavor = flavor;
        this.floatingIpEnabled = floatingIpEnabled;
        this.id = id;
        this.keypair = keypair;
        this.labels = labels;
        this.masterAddresses = masterAddresses;
        this.masterCount = masterCount;
        this.masterFlavor = masterFlavor;
        this.name = name;
        this.nodeAddresses = nodeAddresses;
        this.nodeCount = nodeCount;
        this.projectId = projectId;
        this.region = region;
        this.stackId = stackId;
        this.updatedAt = updatedAt;
        this.userId = userId;
    }

    /**
     * @return COE API address.
     * 
     */
    public String apiAddress() {
        return this.apiAddress;
    }
    /**
     * @return The UUID of the V1 Container Infra cluster template.
     * 
     */
    public String clusterTemplateId() {
        return this.clusterTemplateId;
    }
    /**
     * @return COE software version.
     * 
     */
    public String coeVersion() {
        return this.coeVersion;
    }
    public String containerVersion() {
        return this.containerVersion;
    }
    /**
     * @return The timeout (in minutes) for creating the cluster.
     * 
     */
    public Integer createTimeout() {
        return this.createTimeout;
    }
    /**
     * @return The time at which cluster was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The URL used for cluster node discovery.
     * 
     */
    public String discoveryUrl() {
        return this.discoveryUrl;
    }
    /**
     * @return The size (in GB) of the Docker volume.
     * 
     */
    public Integer dockerVolumeSize() {
        return this.dockerVolumeSize;
    }
    /**
     * @return The fixed network that is attached to the cluster.
     * 
     */
    public String fixedNetwork() {
        return this.fixedNetwork;
    }
    /**
     * @return The fixed subnet that is attached to the cluster.
     * 
     */
    public String fixedSubnet() {
        return this.fixedSubnet;
    }
    /**
     * @return The flavor for the nodes of the cluster.
     * 
     */
    public String flavor() {
        return this.flavor;
    }
    public Boolean floatingIpEnabled() {
        return this.floatingIpEnabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the Compute service SSH keypair.
     * 
     */
    public String keypair() {
        return this.keypair;
    }
    /**
     * @return The list of key value pairs representing additional properties of
     * the cluster.
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    /**
     * @return IP addresses of the master node of the cluster.
     * 
     */
    public List<String> masterAddresses() {
        return this.masterAddresses;
    }
    /**
     * @return The number of master nodes for the cluster.
     * 
     */
    public Integer masterCount() {
        return this.masterCount;
    }
    /**
     * @return The flavor for the master nodes.
     * 
     */
    public String masterFlavor() {
        return this.masterFlavor;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return IP addresses of the node of the cluster.
     * 
     */
    public List<String> nodeAddresses() {
        return this.nodeAddresses;
    }
    /**
     * @return The number of nodes for the cluster.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The project of the cluster.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return UUID of the Orchestration service stack.
     * 
     */
    public String stackId() {
        return this.stackId;
    }
    /**
     * @return The time at which cluster was updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return The user of the cluster.
     * 
     */
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String apiAddress;
        private String clusterTemplateId;
        private String coeVersion;
        private String containerVersion;
        private Integer createTimeout;
        private String createdAt;
        private String discoveryUrl;
        private Integer dockerVolumeSize;
        private String fixedNetwork;
        private String fixedSubnet;
        private String flavor;
        private Boolean floatingIpEnabled;
        private String id;
        private String keypair;
        private Map<String,Object> labels;
        private List<String> masterAddresses;
        private Integer masterCount;
        private String masterFlavor;
        private String name;
        private List<String> nodeAddresses;
        private Integer nodeCount;
        private String projectId;
        private String region;
        private String stackId;
        private String updatedAt;
        private String userId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiAddress = defaults.apiAddress;
    	      this.clusterTemplateId = defaults.clusterTemplateId;
    	      this.coeVersion = defaults.coeVersion;
    	      this.containerVersion = defaults.containerVersion;
    	      this.createTimeout = defaults.createTimeout;
    	      this.createdAt = defaults.createdAt;
    	      this.discoveryUrl = defaults.discoveryUrl;
    	      this.dockerVolumeSize = defaults.dockerVolumeSize;
    	      this.fixedNetwork = defaults.fixedNetwork;
    	      this.fixedSubnet = defaults.fixedSubnet;
    	      this.flavor = defaults.flavor;
    	      this.floatingIpEnabled = defaults.floatingIpEnabled;
    	      this.id = defaults.id;
    	      this.keypair = defaults.keypair;
    	      this.labels = defaults.labels;
    	      this.masterAddresses = defaults.masterAddresses;
    	      this.masterCount = defaults.masterCount;
    	      this.masterFlavor = defaults.masterFlavor;
    	      this.name = defaults.name;
    	      this.nodeAddresses = defaults.nodeAddresses;
    	      this.nodeCount = defaults.nodeCount;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.stackId = defaults.stackId;
    	      this.updatedAt = defaults.updatedAt;
    	      this.userId = defaults.userId;
        }

        public Builder apiAddress(String apiAddress) {
            this.apiAddress = Objects.requireNonNull(apiAddress);
            return this;
        }
        public Builder clusterTemplateId(String clusterTemplateId) {
            this.clusterTemplateId = Objects.requireNonNull(clusterTemplateId);
            return this;
        }
        public Builder coeVersion(String coeVersion) {
            this.coeVersion = Objects.requireNonNull(coeVersion);
            return this;
        }
        public Builder containerVersion(String containerVersion) {
            this.containerVersion = Objects.requireNonNull(containerVersion);
            return this;
        }
        public Builder createTimeout(Integer createTimeout) {
            this.createTimeout = Objects.requireNonNull(createTimeout);
            return this;
        }
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        public Builder discoveryUrl(String discoveryUrl) {
            this.discoveryUrl = Objects.requireNonNull(discoveryUrl);
            return this;
        }
        public Builder dockerVolumeSize(Integer dockerVolumeSize) {
            this.dockerVolumeSize = Objects.requireNonNull(dockerVolumeSize);
            return this;
        }
        public Builder fixedNetwork(String fixedNetwork) {
            this.fixedNetwork = Objects.requireNonNull(fixedNetwork);
            return this;
        }
        public Builder fixedSubnet(String fixedSubnet) {
            this.fixedSubnet = Objects.requireNonNull(fixedSubnet);
            return this;
        }
        public Builder flavor(String flavor) {
            this.flavor = Objects.requireNonNull(flavor);
            return this;
        }
        public Builder floatingIpEnabled(Boolean floatingIpEnabled) {
            this.floatingIpEnabled = Objects.requireNonNull(floatingIpEnabled);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder keypair(String keypair) {
            this.keypair = Objects.requireNonNull(keypair);
            return this;
        }
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder masterAddresses(List<String> masterAddresses) {
            this.masterAddresses = Objects.requireNonNull(masterAddresses);
            return this;
        }
        public Builder masterAddresses(String... masterAddresses) {
            return masterAddresses(List.of(masterAddresses));
        }
        public Builder masterCount(Integer masterCount) {
            this.masterCount = Objects.requireNonNull(masterCount);
            return this;
        }
        public Builder masterFlavor(String masterFlavor) {
            this.masterFlavor = Objects.requireNonNull(masterFlavor);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nodeAddresses(List<String> nodeAddresses) {
            this.nodeAddresses = Objects.requireNonNull(nodeAddresses);
            return this;
        }
        public Builder nodeAddresses(String... nodeAddresses) {
            return nodeAddresses(List.of(nodeAddresses));
        }
        public Builder nodeCount(Integer nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder stackId(String stackId) {
            this.stackId = Objects.requireNonNull(stackId);
            return this;
        }
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }        public GetClusterResult build() {
            return new GetClusterResult(apiAddress, clusterTemplateId, coeVersion, containerVersion, createTimeout, createdAt, discoveryUrl, dockerVolumeSize, fixedNetwork, fixedSubnet, flavor, floatingIpEnabled, id, keypair, labels, masterAddresses, masterCount, masterFlavor, name, nodeAddresses, nodeCount, projectId, region, stackId, updatedAt, userId);
        }
    }
}
