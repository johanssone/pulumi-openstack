// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceUser {
    /**
     * @return A list of databases that user will have access to. If not specified,
     * user has access to all databases on th einstance. Changing this creates a new instance.
     * 
     */
    private final @Nullable List<String> databases;
    /**
     * @return An ip address or % sign indicating what ip addresses can connect with
     * this user credentials. Changing this creates a new instance.
     * 
     */
    private final @Nullable String host;
    /**
     * @return Database to be created on new instance. Changing this creates a
     * new instance.
     * 
     */
    private final String name;
    /**
     * @return User&#39;s password. Changing this creates a
     * new instance.
     * 
     */
    private final @Nullable String password;

    @CustomType.Constructor
    private InstanceUser(
        @CustomType.Parameter("databases") @Nullable List<String> databases,
        @CustomType.Parameter("host") @Nullable String host,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("password") @Nullable String password) {
        this.databases = databases;
        this.host = host;
        this.name = name;
        this.password = password;
    }

    /**
     * @return A list of databases that user will have access to. If not specified,
     * user has access to all databases on th einstance. Changing this creates a new instance.
     * 
     */
    public List<String> databases() {
        return this.databases == null ? List.of() : this.databases;
    }
    /**
     * @return An ip address or % sign indicating what ip addresses can connect with
     * this user credentials. Changing this creates a new instance.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return Database to be created on new instance. Changing this creates a
     * new instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return User&#39;s password. Changing this creates a
     * new instance.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceUser defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> databases;
        private @Nullable String host;
        private String name;
        private @Nullable String password;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databases = defaults.databases;
    	      this.host = defaults.host;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
        }

        public Builder databases(@Nullable List<String> databases) {
            this.databases = databases;
            return this;
        }
        public Builder databases(String... databases) {
            return databases(List.of(databases));
        }
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }        public InstanceUser build() {
            return new InstanceUser(databases, host, name, password);
        }
    }
}
