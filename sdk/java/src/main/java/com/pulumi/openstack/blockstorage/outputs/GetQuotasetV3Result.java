// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.openstack.blockstorage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetQuotasetV3Result {
    /**
     * @return The size (GB) of backups that are allowed.
     * 
     */
    private final Integer backupGigabytes;
    /**
     * @return The number of backups that are allowed.
     * 
     */
    private final Integer backups;
    /**
     * @return The size (GB) of volumes and snapshots that are allowed.
     * 
     */
    private final Integer gigabytes;
    /**
     * @return The number of groups that are allowed.
     * 
     */
    private final Integer groups;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The size (GB) of volumes that are allowed for each volume.
     * 
     */
    private final Integer perVolumeGigabytes;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String projectId;
    /**
     * @return See Argument Reference above.
     * 
     */
    private final String region;
    /**
     * @return The number of snapshots that are allowed.
     * 
     */
    private final Integer snapshots;
    /**
     * @return Map with gigabytes_{volume_type}, snapshots_{volume_type}, volumes_{volume_type} for each volume type.
     * 
     */
    private final Map<String,Object> volumeTypeQuota;
    /**
     * @return The number of volumes that are allowed.
     * 
     */
    private final Integer volumes;

    @CustomType.Constructor
    private GetQuotasetV3Result(
        @CustomType.Parameter("backupGigabytes") Integer backupGigabytes,
        @CustomType.Parameter("backups") Integer backups,
        @CustomType.Parameter("gigabytes") Integer gigabytes,
        @CustomType.Parameter("groups") Integer groups,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("perVolumeGigabytes") Integer perVolumeGigabytes,
        @CustomType.Parameter("projectId") String projectId,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("snapshots") Integer snapshots,
        @CustomType.Parameter("volumeTypeQuota") Map<String,Object> volumeTypeQuota,
        @CustomType.Parameter("volumes") Integer volumes) {
        this.backupGigabytes = backupGigabytes;
        this.backups = backups;
        this.gigabytes = gigabytes;
        this.groups = groups;
        this.id = id;
        this.perVolumeGigabytes = perVolumeGigabytes;
        this.projectId = projectId;
        this.region = region;
        this.snapshots = snapshots;
        this.volumeTypeQuota = volumeTypeQuota;
        this.volumes = volumes;
    }

    /**
     * @return The size (GB) of backups that are allowed.
     * 
     */
    public Integer backupGigabytes() {
        return this.backupGigabytes;
    }
    /**
     * @return The number of backups that are allowed.
     * 
     */
    public Integer backups() {
        return this.backups;
    }
    /**
     * @return The size (GB) of volumes and snapshots that are allowed.
     * 
     */
    public Integer gigabytes() {
        return this.gigabytes;
    }
    /**
     * @return The number of groups that are allowed.
     * 
     */
    public Integer groups() {
        return this.groups;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The size (GB) of volumes that are allowed for each volume.
     * 
     */
    public Integer perVolumeGigabytes() {
        return this.perVolumeGigabytes;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return See Argument Reference above.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The number of snapshots that are allowed.
     * 
     */
    public Integer snapshots() {
        return this.snapshots;
    }
    /**
     * @return Map with gigabytes_{volume_type}, snapshots_{volume_type}, volumes_{volume_type} for each volume type.
     * 
     */
    public Map<String,Object> volumeTypeQuota() {
        return this.volumeTypeQuota;
    }
    /**
     * @return The number of volumes that are allowed.
     * 
     */
    public Integer volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetQuotasetV3Result defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer backupGigabytes;
        private Integer backups;
        private Integer gigabytes;
        private Integer groups;
        private String id;
        private Integer perVolumeGigabytes;
        private String projectId;
        private String region;
        private Integer snapshots;
        private Map<String,Object> volumeTypeQuota;
        private Integer volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(GetQuotasetV3Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupGigabytes = defaults.backupGigabytes;
    	      this.backups = defaults.backups;
    	      this.gigabytes = defaults.gigabytes;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.perVolumeGigabytes = defaults.perVolumeGigabytes;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.snapshots = defaults.snapshots;
    	      this.volumeTypeQuota = defaults.volumeTypeQuota;
    	      this.volumes = defaults.volumes;
        }

        public Builder backupGigabytes(Integer backupGigabytes) {
            this.backupGigabytes = Objects.requireNonNull(backupGigabytes);
            return this;
        }
        public Builder backups(Integer backups) {
            this.backups = Objects.requireNonNull(backups);
            return this;
        }
        public Builder gigabytes(Integer gigabytes) {
            this.gigabytes = Objects.requireNonNull(gigabytes);
            return this;
        }
        public Builder groups(Integer groups) {
            this.groups = Objects.requireNonNull(groups);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder perVolumeGigabytes(Integer perVolumeGigabytes) {
            this.perVolumeGigabytes = Objects.requireNonNull(perVolumeGigabytes);
            return this;
        }
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder snapshots(Integer snapshots) {
            this.snapshots = Objects.requireNonNull(snapshots);
            return this;
        }
        public Builder volumeTypeQuota(Map<String,Object> volumeTypeQuota) {
            this.volumeTypeQuota = Objects.requireNonNull(volumeTypeQuota);
            return this;
        }
        public Builder volumes(Integer volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }        public GetQuotasetV3Result build() {
            return new GetQuotasetV3Result(backupGigabytes, backups, gigabytes, groups, id, perVolumeGigabytes, projectId, region, snapshots, volumeTypeQuota, volumes);
        }
    }
}
