// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-openstack/sdk/v4/go/openstack/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: openstack.loadbalancer/loadbalancer.LoadBalancer has been deprecated in favor of openstack.index/lbloadbalancerv2.LbLoadbalancerV2
type LoadBalancer struct {
	pulumi.CustomResourceState

	AdminStateUp         pulumi.BoolPtrOutput     `pulumi:"adminStateUp"`
	AvailabilityZone     pulumi.StringPtrOutput   `pulumi:"availabilityZone"`
	Description          pulumi.StringPtrOutput   `pulumi:"description"`
	FlavorId             pulumi.StringOutput      `pulumi:"flavorId"`
	LoadbalancerProvider pulumi.StringOutput      `pulumi:"loadbalancerProvider"`
	Name                 pulumi.StringOutput      `pulumi:"name"`
	Region               pulumi.StringOutput      `pulumi:"region"`
	SecurityGroupIds     pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	Tags                 pulumi.StringArrayOutput `pulumi:"tags"`
	TenantId             pulumi.StringOutput      `pulumi:"tenantId"`
	VipAddress           pulumi.StringOutput      `pulumi:"vipAddress"`
	VipNetworkId         pulumi.StringOutput      `pulumi:"vipNetworkId"`
	VipPortId            pulumi.StringOutput      `pulumi:"vipPortId"`
	VipSubnetId          pulumi.StringOutput      `pulumi:"vipSubnetId"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		args = &LoadBalancerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("openstack:loadbalancer/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("openstack:loadbalancer/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	AdminStateUp         *bool    `pulumi:"adminStateUp"`
	AvailabilityZone     *string  `pulumi:"availabilityZone"`
	Description          *string  `pulumi:"description"`
	FlavorId             *string  `pulumi:"flavorId"`
	LoadbalancerProvider *string  `pulumi:"loadbalancerProvider"`
	Name                 *string  `pulumi:"name"`
	Region               *string  `pulumi:"region"`
	SecurityGroupIds     []string `pulumi:"securityGroupIds"`
	Tags                 []string `pulumi:"tags"`
	TenantId             *string  `pulumi:"tenantId"`
	VipAddress           *string  `pulumi:"vipAddress"`
	VipNetworkId         *string  `pulumi:"vipNetworkId"`
	VipPortId            *string  `pulumi:"vipPortId"`
	VipSubnetId          *string  `pulumi:"vipSubnetId"`
}

type LoadBalancerState struct {
	AdminStateUp         pulumi.BoolPtrInput
	AvailabilityZone     pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	FlavorId             pulumi.StringPtrInput
	LoadbalancerProvider pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	SecurityGroupIds     pulumi.StringArrayInput
	Tags                 pulumi.StringArrayInput
	TenantId             pulumi.StringPtrInput
	VipAddress           pulumi.StringPtrInput
	VipNetworkId         pulumi.StringPtrInput
	VipPortId            pulumi.StringPtrInput
	VipSubnetId          pulumi.StringPtrInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	AdminStateUp         *bool    `pulumi:"adminStateUp"`
	AvailabilityZone     *string  `pulumi:"availabilityZone"`
	Description          *string  `pulumi:"description"`
	FlavorId             *string  `pulumi:"flavorId"`
	LoadbalancerProvider *string  `pulumi:"loadbalancerProvider"`
	Name                 *string  `pulumi:"name"`
	Region               *string  `pulumi:"region"`
	SecurityGroupIds     []string `pulumi:"securityGroupIds"`
	Tags                 []string `pulumi:"tags"`
	TenantId             *string  `pulumi:"tenantId"`
	VipAddress           *string  `pulumi:"vipAddress"`
	VipNetworkId         *string  `pulumi:"vipNetworkId"`
	VipPortId            *string  `pulumi:"vipPortId"`
	VipSubnetId          *string  `pulumi:"vipSubnetId"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	AdminStateUp         pulumi.BoolPtrInput
	AvailabilityZone     pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	FlavorId             pulumi.StringPtrInput
	LoadbalancerProvider pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	SecurityGroupIds     pulumi.StringArrayInput
	Tags                 pulumi.StringArrayInput
	TenantId             pulumi.StringPtrInput
	VipAddress           pulumi.StringPtrInput
	VipNetworkId         pulumi.StringPtrInput
	VipPortId            pulumi.StringPtrInput
	VipSubnetId          pulumi.StringPtrInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

// LoadBalancerArrayInput is an input type that accepts LoadBalancerArray and LoadBalancerArrayOutput values.
// You can construct a concrete instance of `LoadBalancerArrayInput` via:
//
//	LoadBalancerArray{ LoadBalancerArgs{...} }
type LoadBalancerArrayInput interface {
	pulumi.Input

	ToLoadBalancerArrayOutput() LoadBalancerArrayOutput
	ToLoadBalancerArrayOutputWithContext(context.Context) LoadBalancerArrayOutput
}

type LoadBalancerArray []LoadBalancerInput

func (LoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return i.ToLoadBalancerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerArrayOutput)
}

// LoadBalancerMapInput is an input type that accepts LoadBalancerMap and LoadBalancerMapOutput values.
// You can construct a concrete instance of `LoadBalancerMapInput` via:
//
//	LoadBalancerMap{ "key": LoadBalancerArgs{...} }
type LoadBalancerMapInput interface {
	pulumi.Input

	ToLoadBalancerMapOutput() LoadBalancerMapOutput
	ToLoadBalancerMapOutputWithContext(context.Context) LoadBalancerMapOutput
}

type LoadBalancerMap map[string]LoadBalancerInput

func (LoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerMap) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return i.ToLoadBalancerMapOutputWithContext(context.Background())
}

func (i LoadBalancerMap) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerMapOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

func (o LoadBalancerOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

func (o LoadBalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LoadBalancerOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) LoadbalancerProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.LoadbalancerProvider }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o LoadBalancerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LoadBalancerOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) VipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.VipAddress }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) VipNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.VipNetworkId }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) VipPortId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.VipPortId }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) VipSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.VipSubnetId }).(pulumi.StringOutput)
}

type LoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) Index(i pulumi.IntInput) LoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].([]*LoadBalancer)[vs[1].(int)]
	}).(LoadBalancerOutput)
}

type LoadBalancerMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].(map[string]*LoadBalancer)[vs[1].(string)]
	}).(LoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerArrayInput)(nil)).Elem(), LoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerMapInput)(nil)).Elem(), LoadBalancerMap{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
	pulumi.RegisterOutputType(LoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerMapOutput{})
}
